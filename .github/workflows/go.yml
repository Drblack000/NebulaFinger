name: Go Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.3'
        cache: true

    - name: Run tests
      run: go test -v ./...

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.3'
        cache: true

    - name: Set VERSION variable
      run: echo "VERSION=${GITHUB_REF_NAME:-v0.0.0}" >> $GITHUB_ENV
      shell: bash

    - name: Set binary extension
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          echo "BINARY_EXT=.exe" >> $GITHUB_ENV
        else
          echo "BINARY_EXT=" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: go build -v -o nebulafinger_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}${{ env.BINARY_EXT }} ./cmd/main.go

    - name: Package Binary
      run: |
        mkdir -p release
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -j release/nebulafinger_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip nebulafinger_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}${{ env.BINARY_EXT }} README.md INSTALL.md
        else
          tar -czvf release/nebulafinger_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz nebulafinger_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}${{ env.BINARY_EXT }} README.md INSTALL.md
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nebulafinger_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}
        path: release/*
        retention-days: 5

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: release

    - name: Flatten release directory
      run: |
        mkdir -p flat_release
        find release -type f -exec cp {} flat_release \;
      shell: bash

    - name: Generate checksum
      run: |
        cd flat_release
        sha256sum * > nebulafinger_checksums.txt
      shell: bash

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          flat_release/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
